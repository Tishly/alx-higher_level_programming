The "7-base_geometry" module
================================

Using the 7-base_geometry
--------------------------------

# Importing function from the module:
>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

# Checking for module docstring:
>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

# Checking for module docstring:
>>> m = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(m) > 1
True

#Checking for method docstring:
>>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(mod1) > 1
True
>>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(mod2) > 1
True

# Checking if Exception is raised:
>>> b = BG()
>>> b.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# Checking too many arguments for area method:
>>> b.area(1)
Traceback (most recent call last):
...
TypeError: area() takes 1 positional argument but 2 were given

# Checking integer_validator for passing integer:
>>> b.integer_validator("integer", 1)

# Checking for integer == 0:
>>> b.integer_validator("integer", 0)
Traceback (most recent call last):
...
ValueError: integer must be greater than 0

# Checking for integer < 0:
>>> b.integer_validator("integer", -1)
Traceback (most recent call last):
...
ValueError: integer must be greater than 0

# Checking for non-integer types:
>>> b.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer
>>> b.integer_validator("string", "hello")
Traceback (most recent call last):
...
TypeError: string must be an integer
>>> b.integer_validator("list", [1, 5, 10])
Traceback (most recent call last):
...
TypeError: list must be an integer
>>> b.integer_validator("dict", {key:21232, here:328})
Traceback (most recent call last):
...
TypeError: dict must be an integer
>>> b.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer
>>> b.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
...
TypeError: complex must be an integer
>>> b.integer_validator("float", 4.56)
Traceback (most recent call last):
...
TypeError: float must be an integer

# Checking for no arguments passed to integer validator method:
>>>  b.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() takes 2 positional argument but 0 were given

# Checking if 1 argument was passed:
>>>  b.integer_validator(1)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 2 positional argument but 1 was given

# Checking if excess arguments were passed to integer_validator:
>>>  b.integer_validator("argument", 1, 3)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 2 positional argument but 3 were given
